
"""
This module provides a service for translating a topic into multiple languages using a language model.
Classes:
    TopicTranslatorService: A service class for translating the topic into multiple languages.
    Methods:
        __init__(self, setup: TopicTranslatorSetup, topic: Topic) -> None:
            Initializes the TopicTranslatorService with the given setup and topic instances.
        translate(self) -> None:
            Translates the topic into multiple languages defined in the setup model.
Functions:
    translate_topic(topic: Topic) -> None: 
        Helper function that translates a given topic into multiple languages using a setup and topic instance.  
"""
import json
import logging

from langchain.schema.output_parser import StrOutputParser

from languages.models import Language
from topics.models import Topic
from topic_generator.models import TopicTranslatorSetup
from llm_settings.implementations import LLMModelFactory


_SETUP_MODEL = TopicTranslatorSetup


logger = logging.getLogger("topic_generator")


class TopicTranslatorService:

    def __init__(self, setup: TopicTranslatorSetup, topic: Topic):
        self.topic = topic
        self.setup = setup
        self.topic_model = topic.__class__
        self.model = LLMModelFactory.get_model(self.setup.model)
        self.chain = self.model | StrOutputParser() | json.loads
    
    def translate(self) -> None:
        languages_to_translate = self.setup.languages_to_translate.all()
        for language in languages_to_translate:
            self._translate_topic(language)

    def _translate_topic(self, language: Language) -> None:
        prompt = self._get_prompt(language)
        try:
            response = self.chain.invoke(prompt)
        except Exception as e:
            logger.error("Error parsing response: (%s) %s", type(e).__name__, e, exc_info=True)
            logger.debug("Response: %s", response)
            logger.debug("Prompt: %s", prompt)
        else:
            topic_content = {
                "is_autogenerated": True,
                "reference": self.topic,
                "lang": language,
                "tag": self.topic.tag,
                **response
            }
            self._save_topic(topic_content)

    def _save_topic(self, topic_content: dict) -> None:
        try:
            self.topic_model.objects.create(**topic_content)
        except TypeError as e:
            logger.error("Error creation instance: %s", e)
            logger.debug("Topic content: %s", topic_content)
        
    def _get_prompt(self, language) -> str:
        template = self.setup.template
        template = template.replace("{topic}", self._get_formatted_topic())
        template = template.replace("{original_language}", self.topic.language_name)
        template = template.replace("{language_to_translate}", language.name)
        prompt = template
        return prompt
    
    def _get_formatted_topic(self):
        formatted_topic = "Title: {} \n Description: {}\n Questions: {}".format(
                self.topic.title,
                self.topic.title,
                "\n".join(f"- {question}"for question in self.topic.questions),
            )
        return formatted_topic
        

def translate_topic(topic: Topic) -> None:
    # Assuming it is possible the have only one setup active at a time
    setup = _SETUP_MODEL.objects.filter(is_enabled=True).first()
    
    if not setup:
        logger.info("No active setup found.")
        return
    
    service = TopicTranslatorService(
        setup=setup,
        topic=topic
    )
    service.translate()