from random import choice
from json.decoder import JSONDecodeError

from cards.models import Card
from topics.models import Topic, TopicTag
from services.model import LLModelSingleton
from services.topics.generate.formatter import TopicFormatter
from services.topics.generate.parser import TopicParserSingleton, TopicOutput
from services.topics.generate.prompt import TopicPromptSingleton
from .exceptions import EmptyTopicListException
from .validator import TopicGeneratorValidator


class TopicGenerator:

    def __init__(self) -> None:
        self.model = LLModelSingleton.get_instance()
        self.prompt = TopicPromptSingleton.get_instance()
        self.parser = TopicParserSingleton.get_instance()
        self.tag = self.__get_random_tag()
        self.topics = self.tag.topics.all()

    def start(self):
        try:
            topics_text = self.__get_formatted_text()
        except EmptyTopicListException:
            print('EmptyTopicListException')
        else:
            _input = self.__get_input_for_model(topics_text)
            output = self.__get_output_from_model(_input)
            topic_output = self.__parse_output(output)           
            if topic_output:
                is_valid = self.__validate_output(topic_output)
                new_topic = Topic.create(topic_output.title, topic_output.description, enabled=is_valid, autogenerated = True)
                Card.create_cards_of_topic(new_topic, topic_output.questions)
                self.tag.topics.add(new_topic)

    def __get_formatted_text(self):
        if not self.topics:
            raise EmptyTopicListException()
        
        formatter =  TopicFormatter(self.topics, self.tag)
        topics_text = formatter.get_formatted_text()
        return topics_text
    
    def __get_input_for_model(self, topics_text: str) -> str:
        _input = self.prompt.format_prompt(topics_text=topics_text)
        return _input.to_string()
    
    def __get_output_from_model(self, _input: str) -> str:
        output = self.model(_input)
        return output

    def __parse_output(self, output: str) -> TopicOutput:
        try:
            topic_output = self.parser.parse(output)
        except JSONDecodeError as error:
            print(f'ERROR: Parsing output :{error}')
            topic_output = None
        return topic_output
    
    # TODO: define another criterion
    def __get_random_tag(self) -> str:
        tags = TopicTag.objects.all()
        tag = choice(tags)
        print(tag)
        return tag

    def __validate_output(self, topic_output: TopicOutput):
        self.validator = TopicGeneratorValidator(self.topics, topic_output)
        return self.validator.validate()
