from langchain.output_parsers import PydanticOutputParser
from langchain.chat_models import ChatOpenAI
from langchain_core.messages.human import HumanMessage

from languages.models import Language
from topics.models import Topic
from cards.models import Card
from services.topics.parsers import TopicOutput
from .prompts import get_prompt_template
from .formatters import get_topic_as_text


class TopicTranslator:
    """Generates new topics from the original ones by translating them to other languages"""

    def __init__(self, topic: Topic, targer_lang: Language) -> None:
        self.topic = topic
        self.targer_lang = targer_lang
        self.parser = PydanticOutputParser(pydantic_object=TopicOutput)
        self.model = ChatOpenAI(temperature=0.0, model="gpt-3.5-turbo")
        self.prompt_templates = get_prompt_template()

    def translate_and_save(self):
        translated_topic = self._translate()
        self._save(translated_topic)

    def _translate(self) -> TopicOutput:
        input = self._get_input_for_model()
        response = self.model(input)
        output = response.content
        translated_topic = self.parser.parse(output)
        return translated_topic
    
    def _get_input_for_model(self) -> list[HumanMessage]:
        topic_as_text = get_topic_as_text(self.topic)
        input = self.prompt_templates.format_messages(
            topic=topic_as_text, 
            original_language=self.topic.get_lang_name(), 
            target_language=self.targer_lang.name
        )
        return input

    def _save(self, topic_output: TopicOutput) -> None:  
        new_topic = Topic.create(
            title = topic_output.title, 
            description = topic_output.description, 
            enabled = False, 
            autogenerated = True,
            lang = self.targer_lang,
            reference = self.topic
        )      
        Card.create_cards(topic=new_topic, questions=topic_output.questions)